<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="10 seconds" debug="false">
    <!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL < ALL，如果设置为WARN，则低于WARN的信息都不会输出 -->
    <!-- scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
    <!-- scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟 -->
    <!-- debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态，默认值为false -->

    <!-- Spring Boot 3.x中关闭打印出logback内部日志信息 -->
    <statusListener class="ch.qos.logback.core.status.NopStatusListener" />

    <contextName>whisper-gateway_log</contextName>

    <!-- name的值是变量的名称，value的值时变量定义的值，通过定义的值会被插入到logger上下文中，定义变量后，可以使${}来使用变量 -->
    <property name="project.name" value="whisper-gateway"/>
    <property name="log.path" value="logs/${project.name}"/>

    <!-- 控制台日志格式，CONSOLE_LOG_PATTERN 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} - [%thread] - %magenta(%-5level) - %-40.40(%logger{50}) - %msg%n"/>

    <!-- 文件日志格式，FILE_LOG_PATTERN 无彩色日志格式 -->
    <property name="FILE_LOG_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} - [%thread] - %-5level - %-40.40(%logger{50}) - %msg%n"/>

    <!-- 同步输出到控制台 -->
    <appender name="CONSOLE_LOG" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息 -->
        <!-- 例如：如果此处配置了INFO级别，则后面其他位置即使配置了DEBUG级别的日志，也不会被输出 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <encoder>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 日志归档，输出到文件，时间滚动输出所有级别的日志 -->
    <appender name="ALL_LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log.path}/service_log.log</file>
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${log.path}/%d{yyyy-MM-dd}/service_log-%d{yyyy-MM-dd}-%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 日志文件最大到128MB -->
                <maxFileSize>128MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留最大天数 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- 日志归档，输出到文件，时间滚动输出 DEBUG 级别的日志 -->
    <appender name="DEBUG_LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log.path}/debug_log.log</file>
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${log.path}/%d{yyyy-MM-dd}/debug_log-%d{yyyy-MM-dd}-%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 日志文件最大到128MB -->
                <maxFileSize>128MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留最大天数 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!-- 此日志文件只记录 DEBUG 级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 日志归档，输出到文件，时间滚动输出 INFO 级别的日志 -->
    <appender name="INFO_LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log.path}/info_log.log</file>
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${log.path}/%d{yyyy-MM-dd}/info_log-%d{yyyy-MM-dd}-%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 日志文件最大到128MB -->
                <maxFileSize>128MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留最大天数 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!-- 此日志文件只记录 INFO 级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 日志归档，输出到文件，时间滚动输出 WARN 级别的日志 -->
    <appender name="WARN_LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log.path}/warn_log.log</file>
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${log.path}/%d{yyyy-MM-dd}/warn_log-%d{yyyy-MM-dd}-%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 日志文件最大到128MB -->
                <maxFileSize>128MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留最大天数 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!-- 此日志文件只记录 WARN 级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 日志归档，输出到文件，时间滚动输出 ERROR 级别的日志 -->
    <appender name="ERROR_LOG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log.path}/error_log.log</file>
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 每天日志归档路径以及格式 -->
            <fileNamePattern>${log.path}/%d{yyyy-MM-dd}/error_log-%d{yyyy-MM-dd}-%i.log.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 日志文件最大到128MB -->
                <maxFileSize>128MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留最大天数 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!-- 此日志文件只记录 ERROR 级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--
        使用mybatis的时候，sql语句是debug下才会打印，所以想要查看sql语句的话，有以下两种操作：
        方案一：把<root level="INFO"> 改成 <root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
        方案二：就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别
     -->

    <!-- 开发环境，打印控制台 -->
    <springProfile name="dev">
        <!--
            <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>
            <logger>仅有一个name属性，一个可选的level属性，一个可选的addtivity属性默认为true
            name：用来指定受此logger约束的某一个包或者具体的某一个类
            level：用来设置日志打印级别，无关大小写：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，如果未设置此属性，那么当前logger将会继承上级的级别
        -->
        <!-- 可以输出项目中的debug日志，包括mybatis的sql日志 -->
        <logger name="com.xazhao" level="DEBUG" additivity="true"/>

        <!--
            root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG
            可以包含零个或多个appender元素。
        -->
        <!-- 需要更详细的日志可将INFO级别改为DEBUG级别 -->
        <root level="INFO">
            <appender-ref ref="CONSOLE_LOG"/>
            <appender-ref ref="ALL_LOG_FILE"/>
            <appender-ref ref="DEBUG_LOG_FILE"/>
            <appender-ref ref="INFO_LOG_FILE"/>
            <appender-ref ref="WARN_LOG_FILE"/>
            <appender-ref ref="ERROR_LOG_FILE"/>
        </root>
    </springProfile>


    <!-- 生产环境，输出到文件 -->
    <springProfile name="prod,uat">
        <!-- 可以输出项目中的debug日志，包括mybatis的sql日志 -->
        <logger name="com.xazhao" level="DEBUG" additivity="true"/>

        <!-- 需要更详细的日志可将INFO级别改为DEBUG级别 -->
        <root level="INFO">
            <appender-ref ref="CONSOLE_LOG"/>
            <appender-ref ref="ALL_LOG_FILE"/>
            <appender-ref ref="DEBUG_LOG_FILE"/>
            <appender-ref ref="INFO_LOG_FILE"/>
            <appender-ref ref="WARN_LOG_FILE"/>
            <appender-ref ref="ERROR_LOG_FILE"/>
        </root>
    </springProfile>

</configuration>
